---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_DESCRIPTION } from "../consts";
import FormattedDate from "../components/FormattedDate.astro";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title="Search the Blog" description={SITE_DESCRIPTION} />
    <style>
      main {
        width: 960px;
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      ul li {
        width: calc(50% - 1rem);
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li:first-child {
        width: 100%;
        margin-bottom: 1rem;
        text-align: center;
      }
      ul li:first-child img {
        width: 100%;
      }
      ul li:first-child .title {
        font-size: 2.369rem;
      }
      ul li img {
        margin-bottom: 0.5rem;
        border-radius: 12px;
      }
      ul li a {
        display: block;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .date {
        margin: 0;
        color: rgb(var(--gray));
      }
      ul li a:hover h4,
      ul li a:hover .date {
        color: rgb(var(--accent));
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }
      @media (max-width: 720px) {
        ul {
          gap: 0.5em;
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li:first-child {
          margin-bottom: 0;
        }
        ul li:first-child .title {
          font-size: 1.563em;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <aside class="form">
        <form>
          <div>
            <label for="search">Search the blog</label>
            <span>Enter a search term or phrase to search the blog.</span>
          </div>
          <input
            type="search"
            required
            min="2"
            max="24"
            name="search"
            id="search"
            placeholder="Enter a search term..."
          />
        </form>
        <p id="searchReadout"></p>
        <section aria-label="Search Result">
          <ul id="searchResults"></ul>
        </section>
      </aside>
      <Footer />
    </main>
    <script>
      import DOMPurify from "dompurify";
      import Fuse from "fuse.js";

      let SEARCH_DATA;
      let FUSE_INSTANCE;
      const FUSE_OPTIONS = {
        includeScore: true,
        shouldSort: true,
        threshold: 0.5,
        keys: [
          {
            name: "title",
            weight: 1,
          },
          {
            name: "description",
            weight: 0.75,
          },
        ],
      };

      const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" id="spinner" width="32" height="32" fill="#000000" viewBox="0 0 256 256"><path d="M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"></path>
        <style>
          #spinner{
            animation: spin 1s linear infinite;
          }
          @keyframes spin {
          100% {
            transform: rotate(360deg);
          }
        }
        </style>
        
        </svg>`;

      const search = document.querySelector("#search");
      const searchReadout = document.querySelector("#searchReadout");
      const searchResults = document.querySelector("#searchResults");

      function updateDocumentTitle(search) {
        searchReadout.textContent = search
          ? `Search results for "${search}"`
          : "";
      }

      function updateSearchReadout(search) {
        document.title = search ? `Search results for "${search}"` : "";
      }

      async function fetchSearchResults(search) {
        if (search.length === 0) return;
        searchResults.innerHTML = SPINNER;
        if (!SEARCH_DATA) {
          try {
            const res = await fetch("/search.json");
            if (!res.ok) {
              throw new Error("shitty, shitty bang, bang");
            }
            const data = await res.json();
            SEARCH_DATA = data;
          } catch (e) {
            console.error(e);
          }
        }
        if (SEARCH_DATA && !FUSE_INSTANCE) {
          const fuse = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
        }
        if (!FUSE_INSTANCE) return;
        const searchResult = FUSE_INSTANCE.search(search);
      }

      window.addEventListener("DOMContentLoaded", () => {
        const urlParams = DOMPurify.sanitize(
          new URLSearchParams(window.location.search).get("search")
        );
        fetchSearchResults(urlParams);
        updateDocumentTitle(urlParams);
        updateSearchReadout(urlParams);
        search.value = urlParams;
        search.focus();
      });

      search.addEventListener("input", () => {
        const searchTerm = DOMPurify.sanitize(search.value);
        updateDocumentTitle(searchTerm);
        updateSearchReadout(searchTerm);
        fetchSearchResults(searchTerm);
      });
    </script>
  </body>
</html>
